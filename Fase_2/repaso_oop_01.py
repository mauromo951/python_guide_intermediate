#Repaso OOP, encapsulamiento, herencia, polimorfismo, herencia mÃºltiple y composiciÃ³n
"""
Encapsulamiento â†’ Controlar el acceso a los atributos/mÃ©todos.

Herencia â†’ Reutilizar cÃ³digo de una clase base en clases hijas.

Polimorfismo â†’ Usar el mismo mÃ©todo pero con diferentes comportamientos segÃºn la clase.

Herencia mÃºltiple â†’ Una clase hereda de varias.

ComposiciÃ³n â†’ Una clase contiene objetos de otra, en lugar de heredar.
"""

##Ejemplo
# Clase base
class Vehiculo:
    def __init__(self, marca):
        self.marca = marca

    # MÃ©todo polimÃ³rfico
    def mover(self):
        return "El vehÃ­culo se estÃ¡ moviendo ðŸš—"


# Herencia: diferentes tipos de vehÃ­culos
class Auto(Vehiculo):
    def mover(self):
        return f"El auto {self.marca} avanza por la carretera ðŸš™"


class Bicicleta(Vehiculo):
    def mover(self):
        return f"La bicicleta {self.marca} pedalea en el carril ðŸš´"


class ScooterElectrico(Vehiculo):
    def mover(self):
        return f"El scooter {self.marca} se desliza en la ciudad ðŸ›´"


# ComposiciÃ³n: un auto con motor y baterÃ­a
class Motor:
    def encender(self):
        return "Motor encendido âœ…"


class Bateria:
    def nivel(self):
        return "BaterÃ­a al 90% âš¡"


class AutoElectrico(Auto):
    def __init__(self, marca):
        super().__init__(marca)
        self.motor = Motor()
        self.bateria = Bateria()

    def mover(self):
        return f"El auto elÃ©ctrico {self.marca} circula en modo silencioso ðŸ”‹"


# -------------------------
# Uso de polimorfismo
if __name__ == "__main__":
    vehiculos = [
        Auto("Toyota"),
        Bicicleta("Trek"),
        ScooterElectrico("Xiaomi"),
        AutoElectrico("Tesla")
    ]

    for v in vehiculos:
        print(v.mover())  # Cada objeto responde de forma distinta aunque se llame igual

